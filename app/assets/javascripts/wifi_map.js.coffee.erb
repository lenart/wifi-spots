Array::remove = (v) -> $.grep @,(e)->e!=v

class @WifiMap
  constructor: () ->
    defaults = {
      center: new google.maps.LatLng(46.0620023, 14.5096064),
      zoom: 12,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    }
    @spots = []
    @bounds = null
    @info = null
    @map = new google.maps.Map(document.getElementById("map_canvas"), defaults)
    
  placeSpots: (spots, showInfo = false) ->
    @placeSpot spot, showInfo for spot in spots
    @autoPanZoom()
    
  placeSpot: (spot, showInfo = false) ->
    spot.latlng = new google.maps.LatLng(spot.lat, spot.lng)
    spot.marker = new google.maps.Marker({
      position: spot.latlng,
      map: @map,
      title: spot.title,
      icon: "<%= image_path('wifi-icon.png') %>"
    })

    if showInfo
      # create info window for spot
      spot.infowindow = new google.maps.InfoWindow(
        content: "<div><h3>#{spot.title}</h3><p style='margin-top: 10px;'><a href=\"#{spot.permalink}\">Podrobnosti</a></p></div>"
        maxWidth: 300
      )
      google.maps.event.addListener spot.marker, 'click', =>
        @info.close() if @info
        @info = spot.infowindow
        spot.infowindow.open(@map, spot.marker)
      
    @spots.push spot
  
  makeEditable: (spot) ->
    marker = spot.marker
    marker.setDraggable(true)

    google.maps.event.addListener(marker, 'dragend', (p) ->
      $('#lat').val(p.latLng.lat())
      $('#lng').val(p.latLng.lng())
    )
    google.maps.event.addListener(@map, 'zoom_changed', ->
      $('#zoom').val(this.getZoom())
    )
  
  autoPanZoom: ->
    @bounds = new google.maps.LatLngBounds()
    @bounds.extend spot.latlng for spot in @spots
    @map.fitBounds @bounds
    
  showUserMarker: ->
    @user.marker.setMap @map if @user.marker
  
  removeUserMarker: ->
    @user.marker.setMap null if @user.marker

class @WifiUtil
  constructor: ->
    @user = {id:0, permalink: null, title: "Tukaj se nahajate vi.", zoom: 13}

  geolocate: ->
    if navigator.geolocation
      browserSupportFlag = true
      navigator.geolocation.getCurrentPosition( (position) =>
        userLocation = @handleUserLocation(position)
      =>
        @handleNoGeolocation(browserSupportFlag)
      )
    else if google.gears
      browserSupportFlag = true
      geo = google.gears.factory.create('beta.geolocation')
      geo.getCurrentPosition( (position) =>
        userLocation = @handleUserLocation(position)
        wifi.map.panTo(userLocation)
      =>
        @handleNoGeoLocation(browserSupportFlag)
      )
    
    else
      # Browser doesn't support Geolocation
      browserSupportFlag = false
      @handleNoGeolocation(browserSupportFlag)
      
  handleNoGeolocation: (support) ->
    console.log "No GEO available. Sorry!"
    @user.address = null
    $('#user_location').html('Tvoj lokacije ni mogoče določiti :(')
    
  handleUserLocation: (position) ->
    positionLatLng = new google.maps.LatLng(position.coords.latitude,position.coords.longitude)
    
    # console.log "Setting user location and latlng"
    @user.lat = positionLatLng.lat()
    @user.lng = positionLatLng.lng()
    @user.latlng = positionLatLng
    
    # geocode latlng to address
    $.ajax({
      url: '/geolocate',
      data: { lat: @user.lat, lng: @user.lng },
      success: (data) =>
        @user.address = data
        $('#user_location').html("Vaša lokacija: " + data)
      error: (data) =>
        @user.address = null
        $('#user_location').html("Prišlo je do napake pri določanju vaše lokacije.")
    })
    
    
    unless @user.marker
      @user.marker = new google.maps.Marker({position: positionLatLng, title: "Tukaj se nahajate vi.", icon: "<%= image_path('star-icon.png') %>" })
      
      if (typeof wifi != 'undefined' )
        # map exists
        @user.marker.setMap(wifi.map)
        wifi.spots.push @user
        wifi.autoPanZoom()
        
    else
      @user.marker.setPosition(positionLatLng)
    
    return positionLatLng